// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//generator client {
// provider = "prisma-client-js"
// output   = "../src/generated/prisma"
//}

//datasource db {
//  provider = "postgresql"
// url      = env("DATABASE_URL")
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Rol {
  TURISTA
  EMPRENDEDOR
  ADMIN
}

model Usuario {
  id       Int      @id @default(autoincrement())
  nombre   String
  correo   String   @unique
  password String
  foto     String?  // <-- agrega este campo si no existe
  creadoEn DateTime @default(now())
  rol      Rol      @default(TURISTA)

  emprendedorPerfiles EmprendedorPerfil[] // Relación uno-a-muchos
  reseñas             Reseña[]           @relation("UsuarioReseñas")
  favoritos           Favorito[]         // <-- relación inversa agregada
}

model EmprendedorPerfil {
  id          Int      @id @default(autoincrement())
  usuarioId   Int      
  nombre      String
  descripcion String?
  telefono    String?
  direccion   String?
  foto        String?
  creadoEn    DateTime @default(now())

  usuario Usuario @relation(fields: [usuarioId], references: [id])
}

model LugarTuristico {
  id           Int       @id @default(autoincrement())
  nombre       String
  descripcion  String?
  imagen_url   String?   // Foto principal (Cloudinary)
  latitud      Float?    // Para mapa
  longitud     Float?    // Para mapa
  creadoEn     DateTime  @default(now())

  reseñas      Reseña[]
  favoritos    Favorito[] // <-- relación inversa agregada
}

model Reseña {
  id         Int           @id @default(autoincrement())
  lugarId    Int
  usuarioId  Int
  comentario String
  imagen     String?       // URL Cloudinary
  creadoEn   DateTime      @default(now())

  lugar      LugarTuristico @relation(fields: [lugarId], references: [id])
  usuario    Usuario        @relation("UsuarioReseñas", fields: [usuarioId], references: [id])
}

model Favorito {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  lugarId   Int
  creadoEn  DateTime @default(now())

  usuario   Usuario        @relation(fields: [usuarioId], references: [id])
  lugar     LugarTuristico @relation(fields: [lugarId], references: [id])
}

model Notificacion {
  id        Int      @id @default(autoincrement())
  mensaje   String
  tipo      String   // Ejemplo: "negocio", "evento"
  fecha     DateTime @default(now())
  activo    Boolean  @default(true)
}