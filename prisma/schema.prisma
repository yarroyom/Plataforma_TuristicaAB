// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//generator client {
// provider = "prisma-client-js"
// output   = "../src/generated/prisma"
//}

//datasource db {
//  provider = "postgresql"
// url      = env("DATABASE_URL")
//}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Rol {
  TURISTA
  EMPRENDEDOR
  ADMIN
}

// Agrega nuevo enum para tipo de lugar
enum TipoLugar {
  TURISTICO
  CULTURAL
}

model Usuario {
  id       Int      @id @default(autoincrement())
  nombre   String
  correo   String   @unique
  password String
  foto     String? // <-- agrega este campo si no existe
  creadoEn DateTime @default(now())
  rol      Rol      @default(TURISTA)

  emprendedorPerfiles EmprendedorPerfil[] // Relación uno-a-muchos
  reseñas            Reseña[]           @relation("UsuarioReseñas")
  favoritos           Favorito[] // <-- relación inversa agregada
  redSociales         RedSocial[] // <-- relación inversa agregada
  eventosCreados      Evento[]            @relation("UsuarioEventos") // <-- nuevos eventos creados por el usuario
}

model EmprendedorPerfil {
  id          Int      @id @default(autoincrement())
  usuarioId   Int
  nombre      String
  descripcion String?
  telefono    String?
  direccion   String?
  foto        String?
  creadoEn    DateTime @default(now())

  usuario Usuario @relation(fields: [usuarioId], references: [id])
}

model LugarTuristico {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  imagen_url  String? // Foto principal (Cloudinary)
  latitud     Float? // <-- aquí la latitud
  longitud    Float? // <-- aquí la longitud
  creadoEn    DateTime @default(now())
  direccion   String? // <-- opcional, para dirección textual

  // Nuevo campo: tipo (Turístico o Cultural)
  tipo TipoLugar @default(TURISTICO)

  // Agregados: campos para calificaciones (suma y conteo)
  calificacionTotal    Float @default(0)
  numeroCalificaciones Int   @default(0)

  reseñas  Reseña[]
  favoritos Favorito[] // <-- relación inversa agregada
}

model Reseña {
  id           Int      @id @default(autoincrement())
  lugarId      Int
  usuarioId    Int
  comentario   String
  calificacion Int? // <-- este campo debe existir
  imagen       String? // URL Cloudinary
  creadoEn     DateTime @default(now())

  lugar   LugarTuristico @relation(fields: [lugarId], references: [id])
  usuario Usuario        @relation("UsuarioReseñas", fields: [usuarioId], references: [id])
}

model Favorito {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  lugarId   Int
  creadoEn  DateTime @default(now())

  usuario Usuario        @relation(fields: [usuarioId], references: [id])
  lugar   LugarTuristico @relation(fields: [lugarId], references: [id])
}

model Notificacion {
  id      Int      @id @default(autoincrement())
  mensaje String
  tipo    String // Ejemplo: "negocio", "evento"
  fecha   DateTime @default(now())
  activo  Boolean  @default(true)
}

model Indicador {
  id        Int              @id @default(autoincrement())
  nombre    String
  categoria String // Ejemplo: "Dependiente", "Independiente 1", "Independiente 2"
  dimension String // <-- nuevo campo para la dimensión
  meta      Float
  unidad    String? // Ejemplo: "personas", "interacciones", "puntos"
  creadoEn  DateTime         @default(now())
  valores   ValorIndicador[]
}

model ValorIndicador {
  id          Int       @id @default(autoincrement())
  indicadorId Int
  valorActual Float
  fecha       DateTime
  // Puedes agregar campos como fuente, observaciones, etc.
  indicador   Indicador @relation(fields: [indicadorId], references: [id])
}

model RedSocial {
  id        Int      @id @default(autoincrement())
  usuarioId Int
  nombre    String // Ejemplo: Facebook, Instagram, etc.
  link      String // Link al perfil
  creadoEn  DateTime @default(now())

  usuario Usuario @relation(fields: [usuarioId], references: [id])
}

model Rating {
  id        Int      @id @default(autoincrement())
  lugarId   Int
  usuarioId Int
  valor     Int
  creadoEn  DateTime @default(now())
  // Relaciones (opcional según tus modelos)
  // lugar   LugarTuristico @relation(fields: [lugarId], references: [id])
  // usuario Usuario @relation(fields: [usuarioId], references: [id])

  @@unique([lugarId, usuarioId])
}

model Evento {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  creadoPor Int? // referencia opcional al usuario que creó el evento
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relación opcional (ajusta si tu modelo usuario se llama distinto)
  creador Usuario? @relation("UsuarioEventos", fields: [creadoPor], references: [id])
}

// Ejemplo de registros para Indicador (agrega estos en Prisma Studio o con un script):

// Variable independiente: Plataforma Web
// Dimensión: Usabilidad
// Indicador: "Número de clics por página"
// categoria: "Usabilidad"
// meta: (define tu meta)
// unidad: "clics"

// Indicador: "Tiempo promedio de permanencia en el sitio"
// categoria: "Usabilidad"
// meta: (define tu meta)
// unidad: "minutos"

// Indicador: "Porcentaje de usuarios que completan tareas"
// categoria: "Usabilidad"
// meta: (define tu meta)
// unidad: "%"

// Dimensión: Accesibilidad
// Indicador: "Número de accesos desde distintas fuentes"
// categoria: "Accesibilidad"
// meta: (define tu meta)
// unidad: "accesos"

// Dimensión: Actualización de contenido
// Indicador: "Número de actualizaciones realizadas"
// categoria: "Actualización de contenido"
// meta: (define tu meta)
// unidad: "actualizaciones"

// Indicador: "Contenido agregado en el periodo"
// categoria: "Actualización de contenido"
// meta: (define tu meta)
// unidad: "elementos"

// Variable dependiente 1: Promoción Turística
// Dimensión: Opinión sobre atractivos
// Indicador: "Promedio de calificaciones a lugares turísticos"
// categoria: "Promoción Turística"
// meta: (define tu meta)
// unidad: "calificación"

// Dimensión: Intención o deseo de visitar
// Indicador: "Número de veces que se usa 'Cómo llegar'"
// categoria: "Promoción Turística"
// meta: (define tu meta)
// unidad: "usos"

// Dimensión: Intención o deseo de recomendar
// Indicador: "Número de veces que se comparte un lugar/evento"
// categoria: "Promoción Turística"
// meta: (define tu meta)
// unidad: "compartidos"

// Dimensión: Interacción con la plataforma
// Indicador: "Cantidad de lugares agregados a favoritos"
// categoria: "Promoción Turística"
// meta: (define tu meta)
// unidad: "favoritos"

// Variable dependiente 2: Promoción Cultural
// Dimensión: Opinión sobre actividades culturales
// Indicador: "Promedio de calificaciones a actividades culturales"
// categoria: "Promoción Cultural"
// meta: (define tu meta)
// unidad: "calificación"

// Dimensión: Intención de recomendar
// Indicador: "Número de veces que se comparten actividades culturales"
// categoria: "Promoción Cultural"
// meta: (define tu meta)
// unidad: "compartidos"

// Dimensión: Participación digital
// Indicador: "Cantidad de comentarios sobre eventos culturales"
// categoria: "Promoción Cultural"
// meta: (define tu meta)
// unidad: "comentarios"
